# This tests verifies the metatest test binary building and caching logic.

# Inner test should work
exec gosim test -v .
stdout 'inside gosim hello'

# Cached metatest fails without binary
! exec go test -v .
stdout 'Could not find pre-built gosim test binary'

# Uncached metatest works
exec go test -v -count=1 .
stdout 'looks like an uncached test run.*build-tests'
stdout 'inside gosim hello'

# Build binary
exec gosim build-tests .

# Cached metatest now works
exec go test -v .
stdout 'Using pre-built gosim test binary'
stdout 'inside gosim hello'

# Uncached metatest still works
exec go test -v -count=1 .
stdout 'looks like an uncached test run.*build-tests'
stdout 'inside gosim hello'

# Touch input file
exec touch test_test.go

# Cached metatest no longer works
! exec go test -v .
stdout 'Using pre-built gosim test binary'
stdout 'changed'

# Uncached metatest still works
exec go test -v -count=1 .
stdout 'looks like an uncached test run.*build-tests'
stdout 'inside gosim hello'

-- metatest_test.go --
//go:build !sim

package behavior_test

import (
	"testing"

    "github.com/kmrgirish/gosim/metatesting"
)

func TestSelf(t *testing.T) {
    mt := metatesting.ForCurrentPackage(t)
	_, err := mt.Run(t, &metatesting.RunConfig{
		Test:     "TestHello",
		Seed:     1,
	})
	if err != nil {
		t.Fatal(err)
	}
}

-- test_test.go --
//go:build sim

package behavior_test

import (
    "testing"
)

func TestHello(t *testing.T) {
    t.Log("inside gosim hello")
}