-- select.go --
package gosimselect

import "log"

func Select() {
	ch := make(chan struct{})
	ch2 := make(chan int)

	var y int

	select {
	case <-ch:
	case y = <-ch2:
		log.Println(y)
	case x := <-ch:
		log.Println(x)
	case x, ok := <-ch:
		log.Println(x, ok)
	case ch <- struct{}{}:
	default:
	}
}
-- translated/select/select.go --
// Code generated by gosim. DO NOT EDIT.
package gosimselect

import (
	"translated/log"

	"github.com/kmrgirish/gosim/gosimruntime"
)

func Select() {
	ch := gosimruntime.NewChan[struct{}](0)
	ch2 := gosimruntime.NewChan[int](0)

	var y int

	switch idx0, val0, ok0 := gosimruntime.Select(ch.RecvSelector(), ch2.RecvSelector(), ch.RecvSelector(), ch.RecvSelector(), ch.SendSelector(struct{}{}), gosimruntime.DefaultSelector()); idx0 {
	case 0:
	case 1:
		y = gosimruntime.ChanCast[int](val0)
		log.Println(y)
	case 2:
		x := gosimruntime.ChanCast[struct{}](val0)
		log.Println(x)
	case 3:
		x, ok := gosimruntime.ChanCast[struct{}](val0), ok0
		log.Println(x, ok)
	case 4:
	default:
	}
}
-- selectcopy.go --
package gosimselect

func Selectcopy() {
	var x = func() chan struct{} {
		ch := make(chan struct{})
		close(ch)
		return ch
	}

	ch := make(chan struct{})

	select {
	case <-ch:
	case <-x():
	case x() <- struct{}{}:
	default:
	}
}
-- translated/select/selectcopy.go --
// Code generated by gosim. DO NOT EDIT.
package gosimselect

import "github.com/kmrgirish/gosim/gosimruntime"

func Selectcopy() {
	var x = func() gosimruntime.Chan[struct{}] {
		ch := gosimruntime.NewChan[struct{}](0)
		ch.Close()
		return ch
	}

	ch := gosimruntime.NewChan[struct{}](0)

	switch idx1, _, _ := gosimruntime.Select(ch.RecvSelector(), x().RecvSelector(), x().SendSelector(struct{}{}), gosimruntime.DefaultSelector()); idx1 {
	case 0:
	case 1:
	case 2:
	default:
	}
}
-- selectdefault.go --
package gosimselect

func Selectdefault() {
	a := make(chan struct{})

	select {}

	select {
	default:
	}

	select {
	case <-a:
	}

	select {
	default:
	case <-a:
	}

	select {
	case <-a:
	default:
	case <-a:
	}

	select {
	case a <- struct{}{}:
	default:
	}
}
-- translated/select/selectdefault.go --
// Code generated by gosim. DO NOT EDIT.
package gosimselect

import "github.com/kmrgirish/gosim/gosimruntime"

func Selectdefault() {
	a := gosimruntime.NewChan[struct{}](0)

	switch idx2, _, _ := gosimruntime.Select(); idx2 {
	default:
		panic("unreachable select")
	}

	switch idx3, _, _ := gosimruntime.Select(gosimruntime.DefaultSelector()); idx3 {
	default:
	}

	switch idx4, _, _ := gosimruntime.Select(a.RecvSelector()); idx4 {
	case 0:
	default:
		panic("unreachable select")
	}

	switch idx5, _, _ := a.SelectRecvOrDefault(); idx5 {
	default:
	case 0:
	}

	switch idx6, _, _ := gosimruntime.Select(a.RecvSelector(), a.RecvSelector(), gosimruntime.DefaultSelector()); idx6 {
	case 0:
	default:
	case 1:
	}

	switch idx7, _, _ := a.SelectSendOrDefault(struct{}{}); idx7 {
	case 0:
	default:
	}
}
-- selectnested.go --
package gosimselect

import "log"

func Selectnested() {
	ch := make(chan struct{})
	ch2 := make(chan int)

	var y int

	select {
	case <-ch:
	case y = <-ch2:
		log.Println(y)
		select {
		case <-ch:
			log.Println("wacky")
		default:
		}
	default:
	}
}
-- translated/select/selectnested.go --
// Code generated by gosim. DO NOT EDIT.
package gosimselect

import (
	"translated/log"

	"github.com/kmrgirish/gosim/gosimruntime"
)

func Selectnested() {
	ch := gosimruntime.NewChan[struct{}](0)
	ch2 := gosimruntime.NewChan[int](0)

	var y int

	switch idx9, val9, _ := gosimruntime.Select(ch.RecvSelector(), ch2.RecvSelector(), gosimruntime.DefaultSelector()); idx9 {
	case 0:
	case 1:
		y = gosimruntime.ChanCast[int](val9)
		log.Println(y)
		switch idx8, _, _ := ch.SelectRecvOrDefault(); idx8 {
		case 0:
			log.Println("wacky")
		default:
		}
	default:
	}
}
