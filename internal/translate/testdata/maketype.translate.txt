-- translated/maketype/gosim_globals.go --
// Code generated by gosim. DO NOT EDIT.
package basicgosim

import "github.com/kmrgirish/gosim/gosimruntime"

type Globals struct {
	builtin int
	named   Named
	ptr     *int
	stru    struct {
		X int
		Y int
		Z struct{}
		Q interface{} "json:\"hello\""
	}
	mp    gosimruntime.Map[int, int]
	ch    gosimruntime.Chan[int]
	slice []int
	array [2]int
	fn    func()
	varfn func(x int, y ...int)
	retfn func(x int) ( string,  error)
	iface interface {
		X(a string) ( string)
		Y(a string, b ...int) ( error,  string)
	}
}

var globals gosimruntime.Global[Globals]

func initializers(initializeShared bool) {}
func G() *Globals                        { return globals.Get() }
func init() {
	gosimruntime.RegisterPackage("test/maketype").Globals = &gosimruntime.Globals{Globals: &globals, Initializers: initializers}
}
-- maketype.go --
package basicgosim

// maketype is called for all globals

var builtin int

type Named int

var named Named

var ptr *int

var stru struct {
	X int
	Y int
	Z struct{}
	Q interface{} `json:"hello"`
}

var mp map[int]int

var ch chan int

var slice []int

var array [2]int

var fn func()
var varfn func(x int, y ...int)
var retfn func(x int) (string, error)

var iface interface {
	X(a string) string
	Y(a string, b ...int) (error, string)
}

func Typeparam[T any]() map[int]T {
	return nil
}
-- translated/maketype/maketype.go --
// Code generated by gosim. DO NOT EDIT.
package basicgosim

import "github.com/kmrgirish/gosim/gosimruntime"

type Named int

func Typeparam[T any]() gosimruntime.Map[int, T] {
	return gosimruntime.NilMap[int, T]()
}
