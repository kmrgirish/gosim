-- mapcomment.go --
package gosimcomment

func Mapcomment() {
	// hello

	var m map[ /* can */ string] /* you */ string // a map

	// ok

	m["foo" /*handle*/] /* it */ = /* in */ "bar" /* here */

	// hmm

	_ = m["bar"] // hello

	// yay

	// hurray
	m = map[ /* -1 */ string]string{
		/* 0 */ "foo" /* 1 */ :/* 2 */ "ok", // ok
		/* 3 */ "bar" /* 4 */ :/* 5 */ "bar", // yes
	} // mm
}
-- translated/comment/mapcomment.go --
// Code generated by gosim. DO NOT EDIT.
package gosimcomment

import "github.com/kmrgirish/gosim/gosimruntime"

func Mapcomment() {
	// hello

	var m gosimruntime.Map[string, string] // a map

	// ok

	m.Set("foo", "bar") /* here */

	// hmm

	_ = m.Get("bar") // hello

	// yay

	// hurray
	m = gosimruntime.MapLiteral([]gosimruntime.KV[string, string]{
		{K: "foo", V: "ok"},  // ok
		{K: "bar", V: "bar"}, // yes
	}) // mm
}
-- selectcomment.go --
package gosimcomment

import "log"

func Selectcomment() {
	var a, b chan struct{}

	// before
	select /* ok */ {
	// in
	case /* foo */ <-a /* bar */ : /* baz */
		// 1
		return // 2
		// 3
	case <-b:
		// between
		log.Println("ok") // after
	default: // me
		// too
	}
}
-- translated/comment/selectcomment.go --
// Code generated by gosim. DO NOT EDIT.
package gosimcomment

import (
	"translated/log"

	"github.com/kmrgirish/gosim/gosimruntime"
)

func Selectcomment() {
	var a, b gosimruntime.Chan[struct{}]

	// before
	switch /* ok */ idx0, _, _ := gosimruntime.Select(a.RecvSelector(), b.RecvSelector(), gosimruntime.DefaultSelector()); idx0 {
	// in
	case /* foo */ 0: /* baz */
		// 1
		return // 2
		// 3
	case 1:
		// between
		log.Println("ok") // after
	default: // me
		// too
	}
}
