-- anonymous/anonymous.go --
package anonymous

import (
	_ "test/packages/testpkg"
)
-- translated/packages/anonymous/anonymous.go --
// Code generated by gosim. DO NOT EDIT.
package anonymous

import (
	_ "translated/test/packages/testpkg"
)
-- commonname/type.go --
package commonname

type Foo struct{}
-- translated/packages/commonname/type.go --
// Code generated by gosim. DO NOT EDIT.
package commonname

type Foo struct{}
-- dot/dot.go --
package dot

import (
	"log"

	. "test/packages/testpkg"
)

func Use() {
	log.Println(DoSomeStuff())
}
-- translated/packages/dot/dot.go --
// Code generated by gosim. DO NOT EDIT.
package dot

import (
	"translated/log"

	"translated/test/packages/testpkg"
)

func Use() {
	log.Println(testpkg.DoSomeStuff())
}
-- globalalias.go --
package main

import (
	alias "test/packages/commonname"
)

// tests that the global uses this alias; otherwise there is a conflict
// between "commonname" the package and "commonname" the locally defined struct
var x = alias.Foo{}

type commonname struct{}

func help() {
	_ = commonname{}
}
-- translated/packages/globalalias.go --
// Code generated by gosim. DO NOT EDIT.
package main

type commonname struct{}

func help() {
	_ = commonname{}
}
-- translated/packages/gosim_globals.go --
// Code generated by gosim. DO NOT EDIT.
package main

import (
	alias "translated/test/packages/commonname"

	"github.com/kmrgirish/gosim/gosimruntime"
)

type Globals struct {
	x alias.Foo
}

var globals gosimruntime.Global[Globals]

func initializers(initializeShared bool) { G().x = alias.Foo{} }
func G() *Globals                        { return globals.Get() }
func init() {
	gosimruntime.RegisterPackage("test/packages").Globals = &gosimruntime.Globals{Globals: &globals, Initializers: initializers}
}
-- nestingpkg/nestedpkg.go --
package nestedpkg

import (
	"test/packages/testpkg"
)

func Hello() chan struct{} {
	testpkg.DoSomeStuff()
	return make(chan struct{})
}
-- translated/packages/nestingpkg/nestedpkg.go --
// Code generated by gosim. DO NOT EDIT.
package nestedpkg

import (
	"translated/test/packages/testpkg"

	"github.com/kmrgirish/gosim/gosimruntime"
)

func Hello() gosimruntime.Chan[struct{}] {
	testpkg.DoSomeStuff()
	return gosimruntime.NewChan[struct{}](0)
}
-- translated/packages/testpkg/gosim_meta_test.go --
// Code generated by gosim. DO NOT EDIT.
package testpkg_test

import (
	testing_original "testing"

	"github.com/kmrgirish/gosim/gosimruntime"
	"translated/github.com/kmrgirish/gosim/internal_/hooks/go123"
)

func init() {
	gosimruntime.SetAllTests([]gosimruntime.Test{
		{Name: "TestHello", Test: ImplTestHello},
	})
}
func TestMain(m *testing_original.M) {
	gosimruntime.TestMain(go123.Runtime())
}
-- testpkg/main.go --
package testpkg

func DoSomeStuff() map[string]int {
	m := make(map[string]int)
	m["foo"] = 5
	return m
}
-- translated/packages/testpkg/main.go --
// Code generated by gosim. DO NOT EDIT.
package testpkg

import "github.com/kmrgirish/gosim/gosimruntime"

func DoSomeStuff() gosimruntime.Map[string, int] {
	m := gosimruntime.NewMap[string, int]()
	m.Set("foo", 5)
	return m
}
-- testpkg/main_test.go --
package testpkg_test

import (
	"log"
	"testing"

	"test/packages/testpkg"
)

func TestHello(t *testing.T) {
	x := testpkg.DoSomeStuff()
	log.Println(x["foo"])
	log.Println("hello")
}
-- translated/packages/testpkg/main_test.go --
// Code generated by gosim. DO NOT EDIT.
package testpkg_test

import (
	"translated/github.com/kmrgirish/gosim/internal_/testing"
	"translated/log"

	"translated/test/packages/testpkg"
)

func ImplTestHello(t *testing.T) {
	x := testpkg.DoSomeStuff()
	log.Println(x.Get("foo"))
	log.Println("hello")
}
-- testprogram/main.go --
package main

import (
	"log"
	"time"
)

func main() {
	time.Sleep(10 * time.Second)
	log.Println("hello world")
}
-- translated/packages/testprogram/main.go --
// Code generated by gosim. DO NOT EDIT.
package main

import (
	"translated/log"
	"translated/time"
)

func main() {
	time.Sleep(10 * time.Second)
	log.Println("hello world")
}
