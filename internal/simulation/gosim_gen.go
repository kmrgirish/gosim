// Code generated by gensyscall. DO NOT EDIT.
package simulation

import (
	"syscall"
	"time"
	"unsafe"

	"golang.org/x/sys/unix"

	"github.com/kmrgirish/gosim/gosimruntime"
	"github.com/kmrgirish/gosim/internal/simulation/fs"
	"github.com/kmrgirish/gosim/internal/simulation/syscallabi"
)

// prevent unused imports
var (
	_ unsafe.Pointer
	_ time.Duration
	_ syscallabi.ValueView[any]
	_ syscall.Errno
	_ fs.InodeInfo
	_ unix.Errno
	_ = gosimruntime.GOOS
)

// gosimOSIface is the interface *GosimOS must implement to work
// with HandleSyscall. The interface is not used but helpful for implementing
// new syscalls.
type gosimOSIface interface {
	MachineGetLabel(machineID int, invocation *syscallabi.Syscall) (label string, err error)
	MachineInodeInfo(machineID int, inodeID int, info syscallabi.ValueView[fs.InodeInfo], invocation *syscallabi.Syscall)
	MachineNew(label string, addr string, program any, invocation *syscallabi.Syscall) (machineID int)
	MachineRecoverInit(machineID int, program any, invocation *syscallabi.Syscall) (iterID int)
	MachineRecoverNext(iterID int, invocation *syscallabi.Syscall) (machineID int, ok bool)
	MachineRecoverRelease(iterID int, invocation *syscallabi.Syscall)
	MachineRestart(machineID int, partialDisk bool, invocation *syscallabi.Syscall) (err error)
	MachineSetBootProgram(machineID int, program any, invocation *syscallabi.Syscall) (err error)
	MachineSetSometimesCrashOnSync(machineID int, crash bool, invocation *syscallabi.Syscall) (err error)
	MachineStop(machineID int, graceful bool, invocation *syscallabi.Syscall)
	MachineWait(machineID int, invocation *syscallabi.Syscall)
	SetConnected(a string, b string, connected bool, invocation *syscallabi.Syscall) (err error)
	SetDelay(a string, b string, delay time.Duration, invocation *syscallabi.Syscall) (err error)
	SetSimulationTimeout(timeout time.Duration, invocation *syscallabi.Syscall) (err error)
}

var _ gosimOSIface = &GosimOS{}

//go:norace
func (os *GosimOS) dispatchSyscall(s *syscallabi.Syscall) {
	// XXX: help this happens for globals in os
	if os == nil {
		s.Errno = uintptr(syscall.ENOSYS)
		return
	}
	os.dispatcher.Dispatch(s)
}

//go:norace
func SyscallMachineGetLabel(machineID int) (label string, err error) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineGetLabel
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(machineID)
	gosimOS.dispatchSyscall(syscall)
	label = syscall.RPtr0.(string)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func trampolineMachineGetLabel(syscall *syscallabi.Syscall) {
	machineID := int(syscall.Int0)
	label, err := syscall.OS.(*GosimOS).MachineGetLabel(machineID, syscall)
	syscall.RPtr0 = label
	syscall.Errno = syscallabi.ErrErrno(err)
	syscall.Complete()
}

//go:norace
func SyscallMachineInodeInfo(machineID int, inodeID int, info *fs.InodeInfo) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineInodeInfo
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(machineID)
	syscall.Int1 = uintptr(inodeID)
	syscall.Ptr2 = info
	gosimOS.dispatchSyscall(syscall)
	syscall.Ptr2 = nil
	return
}

//go:norace
func trampolineMachineInodeInfo(syscall *syscallabi.Syscall) {
	machineID := int(syscall.Int0)
	inodeID := int(syscall.Int1)
	info := syscallabi.NewValueView(syscall.Ptr2.(*fs.InodeInfo))
	syscall.OS.(*GosimOS).MachineInodeInfo(machineID, inodeID, info, syscall)
	syscall.Complete()
}

//go:norace
func SyscallMachineNew(label string, addr string, program any) (machineID int) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineNew
	syscall.OS = gosimOS
	syscall.Ptr0 = label
	syscall.Ptr1 = addr
	syscall.Ptr2 = program
	gosimOS.dispatchSyscall(syscall)
	machineID = int(syscall.R0)
	syscall.Ptr0 = nil
	syscall.Ptr1 = nil
	syscall.Ptr2 = nil
	return
}

//go:norace
func trampolineMachineNew(syscall *syscallabi.Syscall) {
	label := syscall.Ptr0.(string)
	addr := syscall.Ptr1.(string)
	program := syscall.Ptr2.(any)
	machineID := syscall.OS.(*GosimOS).MachineNew(label, addr, program, syscall)
	syscall.R0 = uintptr(machineID)
	syscall.Complete()
}

//go:norace
func SyscallMachineRecoverInit(machineID int, program any) (iterID int) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineRecoverInit
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(machineID)
	syscall.Ptr1 = program
	gosimOS.dispatchSyscall(syscall)
	iterID = int(syscall.R0)
	syscall.Ptr1 = nil
	return
}

//go:norace
func trampolineMachineRecoverInit(syscall *syscallabi.Syscall) {
	machineID := int(syscall.Int0)
	program := syscall.Ptr1.(any)
	iterID := syscall.OS.(*GosimOS).MachineRecoverInit(machineID, program, syscall)
	syscall.R0 = uintptr(iterID)
	syscall.Complete()
}

//go:norace
func SyscallMachineRecoverNext(iterID int) (machineID int, ok bool) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineRecoverNext
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(iterID)
	gosimOS.dispatchSyscall(syscall)
	machineID = int(syscall.R0)
	ok = syscallabi.BoolFromUintptr(syscall.R1)
	return
}

//go:norace
func trampolineMachineRecoverNext(syscall *syscallabi.Syscall) {
	iterID := int(syscall.Int0)
	machineID, ok := syscall.OS.(*GosimOS).MachineRecoverNext(iterID, syscall)
	syscall.R0 = uintptr(machineID)
	syscall.R1 = syscallabi.BoolToUintptr(ok)
	syscall.Complete()
}

//go:norace
func SyscallMachineRecoverRelease(iterID int) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineRecoverRelease
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(iterID)
	gosimOS.dispatchSyscall(syscall)
	return
}

//go:norace
func trampolineMachineRecoverRelease(syscall *syscallabi.Syscall) {
	iterID := int(syscall.Int0)
	syscall.OS.(*GosimOS).MachineRecoverRelease(iterID, syscall)
	syscall.Complete()
}

//go:norace
func SyscallMachineRestart(machineID int, partialDisk bool) (err error) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineRestart
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(machineID)
	syscall.Int1 = syscallabi.BoolToUintptr(partialDisk)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func trampolineMachineRestart(syscall *syscallabi.Syscall) {
	machineID := int(syscall.Int0)
	partialDisk := syscallabi.BoolFromUintptr(syscall.Int1)
	err := syscall.OS.(*GosimOS).MachineRestart(machineID, partialDisk, syscall)
	syscall.Errno = syscallabi.ErrErrno(err)
	syscall.Complete()
}

//go:norace
func SyscallMachineSetBootProgram(machineID int, program any) (err error) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineSetBootProgram
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(machineID)
	syscall.Ptr1 = program
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func trampolineMachineSetBootProgram(syscall *syscallabi.Syscall) {
	machineID := int(syscall.Int0)
	program := syscall.Ptr1.(any)
	err := syscall.OS.(*GosimOS).MachineSetBootProgram(machineID, program, syscall)
	syscall.Errno = syscallabi.ErrErrno(err)
	syscall.Complete()
}

//go:norace
func SyscallMachineSetSometimesCrashOnSync(machineID int, crash bool) (err error) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineSetSometimesCrashOnSync
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(machineID)
	syscall.Int1 = syscallabi.BoolToUintptr(crash)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func trampolineMachineSetSometimesCrashOnSync(syscall *syscallabi.Syscall) {
	machineID := int(syscall.Int0)
	crash := syscallabi.BoolFromUintptr(syscall.Int1)
	err := syscall.OS.(*GosimOS).MachineSetSometimesCrashOnSync(machineID, crash, syscall)
	syscall.Errno = syscallabi.ErrErrno(err)
	syscall.Complete()
}

//go:norace
func SyscallMachineStop(machineID int, graceful bool) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineStop
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(machineID)
	syscall.Int1 = syscallabi.BoolToUintptr(graceful)
	gosimOS.dispatchSyscall(syscall)
	return
}

//go:norace
func trampolineMachineStop(syscall *syscallabi.Syscall) {
	machineID := int(syscall.Int0)
	graceful := syscallabi.BoolFromUintptr(syscall.Int1)
	syscall.OS.(*GosimOS).MachineStop(machineID, graceful, syscall)
	syscall.Complete()
}

//go:norace
func SyscallMachineWait(machineID int) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineMachineWait
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(machineID)
	gosimOS.dispatchSyscall(syscall)
	return
}

//go:norace
func trampolineMachineWait(syscall *syscallabi.Syscall) {
	machineID := int(syscall.Int0)
	syscall.OS.(*GosimOS).MachineWait(machineID, syscall)
}

//go:norace
func SyscallSetConnected(a string, b string, connected bool) (err error) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineSetConnected
	syscall.OS = gosimOS
	syscall.Ptr0 = a
	syscall.Ptr1 = b
	syscall.Int2 = syscallabi.BoolToUintptr(connected)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr0 = nil
	syscall.Ptr1 = nil
	return
}

//go:norace
func trampolineSetConnected(syscall *syscallabi.Syscall) {
	a := syscall.Ptr0.(string)
	b := syscall.Ptr1.(string)
	connected := syscallabi.BoolFromUintptr(syscall.Int2)
	err := syscall.OS.(*GosimOS).SetConnected(a, b, connected, syscall)
	syscall.Errno = syscallabi.ErrErrno(err)
	syscall.Complete()
}

//go:norace
func SyscallSetDelay(a string, b string, delay time.Duration) (err error) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineSetDelay
	syscall.OS = gosimOS
	syscall.Ptr0 = a
	syscall.Ptr1 = b
	syscall.Int2 = uintptr(delay)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr0 = nil
	syscall.Ptr1 = nil
	return
}

//go:norace
func trampolineSetDelay(syscall *syscallabi.Syscall) {
	a := syscall.Ptr0.(string)
	b := syscall.Ptr1.(string)
	delay := time.Duration(syscall.Int2)
	err := syscall.OS.(*GosimOS).SetDelay(a, b, delay, syscall)
	syscall.Errno = syscallabi.ErrErrno(err)
	syscall.Complete()
}

//go:norace
func SyscallSetSimulationTimeout(timeout time.Duration) (err error) {
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.Trampoline = trampolineSetSimulationTimeout
	syscall.OS = gosimOS
	syscall.Int0 = uintptr(timeout)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func trampolineSetSimulationTimeout(syscall *syscallabi.Syscall) {
	timeout := time.Duration(syscall.Int0)
	err := syscall.OS.(*GosimOS).SetSimulationTimeout(timeout, syscall)
	syscall.Errno = syscallabi.ErrErrno(err)
	syscall.Complete()
}
